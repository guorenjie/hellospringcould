# 如果不写 Eureka Server 中的界面中 Application 就会是 Unknown 尽量写
spring:
  application:
    name: book-client
  cloud:
    inetutils:
      # 忽略指定网卡（支持正则），假设你的电脑有 VM 那么该选项是非常有用的一个选项
      ignored-interfaces:             #忽略 docker0 网卡以及 veth 开头的网卡
        - docker0
        - veth.*
      preferred-networks:             # 使用指定网络地址，选择 eth0 网卡，当然也可以直接写 IP （192.168）
        - eth0

eureka:
  instance:
    # 此处建议写，不写默认是机器名
    prefer-ip-address: true
    # 优先级小于 application.properties ，如果你想知道当前注册上去的版本必须使用 application.properties 中的配置写法
    # 因为 bootstrap.yml 最早初始化，那时候还无法读取到 pom.xml 中的属性
    instance-id: ${spring.cloud.client.ip-address}:${spring.application.instance_id:${server.port}}
    # ip-address 强行指定此实例 IP ，不是很推荐，绝大多数情况 prefer-ip-address 与  preferred-networks 配合都够用了
    # 心跳时间，即服务续约间隔时间（缺省为30s）
    lease-renewal-interval-in-seconds: 5
    # 发呆时间，即服务续约到期时间（缺省为90s）
    lease-expiration-duration-in-seconds: 15
  client:
    service-url:
      # 开启健康检查（依赖spring-boot-starter-actuator）
      healthcheck:
        enabled: true
      # 划重点：此处的 defaultZone 千万别写成 default-zone
      defaultZone: http://localhost:8080/eureka/
#    配置ribbon
user-client:
  ribbon:

    #    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule #配置规则 随机
    #    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule #配置规则 轮询
    #    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RetryRule #配置规则 重试
    #    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.WeightedResponseTimeRule #配置规则 响应时间权重
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.BestAvailableRule #配置规则 最空闲连接策略
    ConnectTimeout: 500 #请求连接超时时间
    ReadTimeout: 1000 #请求处理的超时时间
    OkToRetryOnAllOperations: true #对所有请求都进行重试
    MaxAutoRetriesNextServer: 2 #切换实例的重试次数
    MaxAutoRetries: 1 #对当前实例的重试次数
#feign 配置
feign:
  hystrix:
    enabled: true
  client:
    config:
      default:
        connectTimeout: 5000
        readTimeout: 5000
        loggerLevel: full

#hystrix 熔断机制
hystrix:
  shareSecurityContext: true
  command:
    default:
      circuitBreaker:
        # 熔断后的重试时间窗口，且在该时间窗口内只允许一次重试。即在熔断开关打开后，在该时间窗口允许有一次重试，如果重试成功，则将重置Health采样统计并闭合熔断开关实现快速恢复，否则熔断开关还是打开状态，执行快速失败, 默认为为5s。
        sleepWindowInMilliseconds: 10000
        # 如果在一个采样时间窗口内，失败率超过该配置，则自动打开熔断开关实现降级处理，即快速失败。默认配置下采样周期为10s，失败率为50%。
        errorThresholdPercentage: 50
        # 在熔断开关闭合情况下，在进行失败率判断之前，一个采样周期内必须进行至少N个请求才能进行采样统计，目的是有足够的采样使得失败率计算正确，默认为20。
        requestVolumeThreshold: 20
        # 是否强制关闭熔断开关，如果强制关闭了熔断开关，则请求不会被降级，一些特殊场景可以动态配置该开关，默认为false。
        forceClosed: false
        # 是否强制打开熔断开关，如果强制打开可熔断开关，则请求强制降级调用getFallback处理，可以通过动态配置来打开该开关实现一些特殊需求，默认为false。
        forceOpen: false
      execution:
        isolation:
          thread:
            # 是否启用执行超时机制，默认为true
            timeoutEnabled: true
            # 执行超时时间，默认为1000毫秒，如果命令是线程隔离，且配置了executionIsolationThreadInterruptOnTimeout=true，则执行线程将执行中断处理。如果命令是信号量隔离，则进行终止操作，因为信号量隔离与主线程是在一个线程中执行，其不会中断线程处理，所以要根据实际情况来决定是否采用信号量隔离，尤其涉及网络访问的情况。
            timeoutInMilliseconds: 1000
            # 当隔离策略为THREAD时，当执行线程执行超时时，是否进行中断处理，即Future#cancel(true)处理，默认为false。
            interruptOnFutureCancel: true
            # 当隔离策略为THREAD时，当执行线程执行超时时，是否进行中断处理，默认为true。
            interruptOnTimeout: true